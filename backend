takers-backend/
├── config/
│   └── db.js           # MongoDB connection
├── models/
│   ├── Job.js          # Job schema
│   ├── User.js         # User schema
├── routes/
│   ├── drivers.js      # Driver management routes
│   ├── jobs.js         # Job routes
│   ├── payments.js     # Payment routes
│   ├── pricing.js      # Pricing routes
├── .env                # Environment variables
├── package.json        # Backend dependencies
├── server.js           # Main server file

const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');

// Load environment variables
dotenv.config();

// Initialize app
const app = express();
app.use(express.json());
app.use(cors());

// Import routes
const pricingRoutes = require('./routes/pricing');
const driverRoutes = require('./routes/drivers');
const jobRoutes = require('./routes/jobs');
const paymentRoutes = require('./routes/payments');

// Database connection
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Define routes
app.use('/api/pricing', pricingRoutes);
app.use('/api/drivers', driverRoutes);
app.use('/api/jobs', jobRoutes);
app.use('/api/payments', paymentRoutes);

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
