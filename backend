takers-backend/
├── config/
│   └── db.js           # MongoDB connection
├── models/
│   ├── Job.js          # Job schema
│   ├── User.js         # User schema
├── routes/
│   ├── drivers.js      # Driver management routes
│   ├── jobs.js         # Job routes
│   ├── payments.js     # Payment routes
│   ├── pricing.js      # Pricing routes
├── .env                # Environment variables
├── package.json        # Backend dependencies
├── server.js           # Main server file

const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');

// Load environment variables
dotenv.config();

// Initialize app
const app = express();
app.use(express.json());
app.use(cors());

// Import routes
const pricingRoutes = require('./routes/pricing');
const driverRoutes = require('./routes/drivers');
const jobRoutes = require('./routes/jobs');
const paymentRoutes = require('./routes/payments');

// Database connection
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Define routes
app.use('/api/pricing', pricingRoutes);
app.use('/api/drivers', driverRoutes);
app.use('/api/jobs', jobRoutes);
app.use('/api/payments', paymentRoutes);

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

module.exports = connectDB;
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  vehicle: { type: String, required: true },
  isDriver: { type: Boolean, default: false },
});

module.exports = mongoose.model('User', UserSchema);
const mongoose = require('mongoose');

const JobSchema = new mongoose.Schema({
  items: { type: Number, required: true },
  location: { type: String, required: true },
  driver: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  price: { type: Number, required: true },
  status: { type: String, default: 'pending' }, // pending, in-progress, completed
});

module.exports = mongoose.model('Job', JobSchema);
const express = require('express');
const router = express.Router();

// Calculate pricing based on item count
router.post('/calculate', (req, res) => {
  const { itemCount } = req.body;
  const basePrice = 50;
  const additionalCost = itemCount * 10;
  const totalPrice = basePrice + additionalCost;

  res.json({ totalPrice });
});

module.exports = router;
const express = require('express');
const router = express.Router();
const User = require('../models/User');

// Get all drivers
router.get('/', async (req, res) => {
  try {
    const drivers = await User.find({ isDriver: true });
    res.json(drivers);
  } catch (err) {
    res.status(500).send('Server Error');
  }
});

module.exports = router;
MONGO_URI=your_mongodb_connection_string
STRIPE_SECRET_KEY=your_stripe_secret_key
PORT=5000
